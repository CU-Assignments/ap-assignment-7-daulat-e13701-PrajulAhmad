import java.util.*;

class Solution {
    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
        Arrays.sort(tasks);
        Arrays.sort(workers);
        int left = 0, right = Math.min(tasks.length, workers.length);
        while (left < right) {
            int mid = (left + right + 1) / 2;
            if (canAssign(tasks, workers, pills, strength, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    private boolean canAssign(int[] tasks, int[] workers, int pills, int strength, int k) {
        Deque<Integer> deque = new ArrayDeque<>();
        int i = workers.length - k;
        for (int j = 0; j < k; j++) {
            while (i < workers.length && workers[i] + strength >= tasks[j]) {
                deque.offerLast(workers[i++]);
            }
            if (deque.isEmpty()) {
                return false;
            }
            if (deque.peekFirst() >= tasks[j]) {
                deque.pollFirst();
            } else {
                if (pills == 0) {
                    return false;
                }
                pills--;
                deque.pollLast();
            }
        }
        return true;
    }
}
